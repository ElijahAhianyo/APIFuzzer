{
  "swagger": "2.0",
  "info": {
    "version": "2.0.0",
    "title": "Senrio Rest Api",
    "description": "The base senrio rest api"
  },
  "schemes": [
    "https"
  ],
  "host": "dev-api.senr.io",
  "basePath": "/senrio/api/v2.0/",
  "tags": [
    {
      "name": "Iotignore"
    },
    {
      "name": "Tagging"
    }
  ],
  "paths": {
    "/ignored": {
      "get": {
        "tags": [
          "Iotignore"
        ],
        "summary": "Get a list of ignored devices",
        "description": "Lists all ignored devices",
        "responses": {
          "200": {
            "description": "A list of ignored devices",
            "schema": {
              "$ref": "#/definitions/IgnoredDevices"
            }
          }
        }
      }
    },
    "/ignored/new": {
      "post": {
        "tags": [
          "Iotignore"
        ],
        "summary": "Create a new iotmac ignore",
        "description": "Used to insert a new iotmac ignore item",
        "parameters": [
          {
            "name": "device",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IgnoredDevice"
            },
            "description": "Iotmac of the device to ignore"
          }
        ],
        "responses": {
          "201": {
            "description": "resource created"
          },
          "400": {
            "description": "Device already exist or iotmac ignored",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ignored/{iotmac}": {
      "get": {
        "tags": [
          "Iotignore"
        ],
        "summary": "Get all ignored iotdevices for an iotmac",
        "description": "Used to get all ignored iot devices for the iotmac provided",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "description": "The iotmac",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succcess",
            "schema": {
              "$ref": "#/definitions/IgnoredDevices"
            }
          },
          "404": {
            "description": "No results",
            "schema": {
              "$ref": "#/definitions/IgnoredDevices"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Iotignore"
        ],
        "summary": "Update the status of an iotmac",
        "description": "Update the status of an iotmac",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "description": "The iotmac of the device",
            "type": "string"
          },
          {
            "name": "status",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/IgnoredDevice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The item did not exist but was created"
          },
          "204": {
            "description": "The item was successfully updated"
          },
          "400": {
            "description": "Iotmac is required"
          }
        }
      },
      "delete": {
        "tags": [
          "Iotignore"
        ],
        "summary": "Delete an iotmac ignore status",
        "description": "delete an iotmac ignore status",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "description": "the mac address of the device",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The item was successfully deleted"
          },
          "404": {
            "description": "Iotmac is required"
          }
        }
      }
    },
    "/tagging/signatures": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get all signatures",
        "description": "Get all signatures",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SignatureList"
            }
          }
        }
      }
    },
    "/tagging/signatures/new": {
      "post": {
        "tags": [
          "Tagging"
        ],
        "summary": "Create a new signature",
        "description": "Create a new signature",
        "parameters": [
          {
            "name": "signature",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignaturePost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Item was created",
            "schema": {
              "$ref": "#/definitions/Signature"
            }
          },
          "400": {
            "description": "Field is missing or desc is empty",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tagging/signatures/{rowid}": {
      "put": {
        "tags": [
          "Tagging"
        ],
        "summary": "Update a signature record",
        "description": "Post a partial Signature to update",
        "parameters": [
          {
            "name": "signature",
            "in": "body",
            "description": "The partial signature object to use for updating",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignaturePost"
            }
          },
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the signature"
          }
        ],
        "responses": {
          "204": {
            "description": "updated"
          },
          "400": {
            "description": "Row id is missing"
          },
          "404": {
            "description": "Signature not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tagging"
        ],
        "summary": "Delete a signature record",
        "description": "Delete a signature",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the signature"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete was successful"
          },
          "400": {
            "description": "Row id is missing"
          },
          "404": {
            "description": "Signature not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get a single signature",
        "description": "Get a single signature",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the signature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, item was found.",
            "schema": {
              "$ref": "#/definitions/Signature"
            }
          },
          "404": {
            "description": "Signature not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tagging/tags": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get all tags",
        "description": "Get all tags",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TagList"
            }
          }
        }
      }
    },
    "/tagging/tags/new": {
      "post": {
        "tags": [
          "Tagging"
        ],
        "summary": "Create a new tag",
        "description": "Create a new tag",
        "parameters": [
          {
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagPost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag was created",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "description": "Tag already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tagging/tags/{rowid}": {
      "delete": {
        "tags": [
          "Tagging"
        ],
        "summary": "Delete a tag record",
        "description": "Delete a tag",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the tag"
          }
        ],
        "responses": {
          "204": {
            "description": "Item deleted"
          },
          "404": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tagging"
        ],
        "summary": "Updates a tag record",
        "description": "Update a tag",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the tag"
          },
          {
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item was updated",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "description": "Tag with that name already exists"
          },
          "404": {
            "description": "Tag not found"
          }
        }
      },
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Getsa tag record",
        "description": "Get a single tag",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Item found",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "404": {
            "description": "Tag with id not found"
          }
        }
      }
    },
    "/tagging/types": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get all tag types",
        "description": "Get all tag types",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TagTypeList"
            }
          }
        }
      }
    },
    "/tagging/types/{name}": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get an individual tag type",
        "description": "Get a tag type",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of a tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TagType"
            }
          },
          "404": {
            "description": "Tag Type not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tagging"
        ],
        "summary": "Delete a tag type record",
        "description": "Delete a tag type",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the tag type"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete was successful"
          },
          "400": {
            "description": "Name id missing"
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tagging"
        ],
        "summary": "Updates a tag record",
        "description": "Update a tag",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the tag"
          },
          {
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item was updated",
            "schema": {
              "$ref": "#/definitions/TagType"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "/tagging/types/new": {
      "post": {
        "tags": [
          "Tagging"
        ],
        "summary": "Create a new tag type",
        "description": "Create a new tag type",
        "parameters": [
          {
            "name": "tag_type",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Item was created",
            "schema": {
              "$ref": "#/definitions/TagType"
            }
          },
          "400": {
            "description": "Field is missing or tag already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tagging/instances": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get all tag instances",
        "description": "Get all tag instances",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TagInstanceList"
            }
          }
        }
      }
    },
    "/tagging/instances/new": {
      "post": {
        "tags": [
          "Tagging"
        ],
        "summary": "Create a new tag instance",
        "description": "Create a new tag instance",
        "parameters": [
          {
            "name": "tag_instance",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagInstancePost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag instance was created",
            "schema": {
              "$ref": "#/definitions/TagInstance"
            }
          },
          "400": {
            "description": "Tag instance already exists for this device",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tagging/instances/{rowid}": {
      "delete": {
        "tags": [
          "Tagging"
        ],
        "summary": "Delete a tag instance record",
        "description": "Delete a tag instance",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the tag instance"
          }
        ],
        "responses": {
          "204": {
            "description": "Item deleted"
          },
          "404": {
            "description": "Tag instance not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tagging"
        ],
        "summary": "Updates a tag instance record",
        "description": "Update a tag instance",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the tag instance"
          },
          {
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagInstancePost"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "updated"
          },
          "404": {
            "description": "tag instances doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Gets a tag instance record",
        "description": "Get a single tag instance",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The unique id of the tag instance"
          }
        ],
        "responses": {
          "200": {
            "description": "Item found",
            "schema": {
              "$ref": "#/definitions/TagInstance"
            }
          },
          "404": {
            "description": "Tag instance with id not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tagging/instances/_count": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get the count of a tag instances",
        "description": "Get the count of a tag instances grouped by tag",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TagInstanceCountList"
            }
          }
        }
      }
    },
    "/tagging/replace/{iotid}/{sigid}": {
      "post": {
        "tags": [
          "Tagging"
        ],
        "summary": "Replace existing tags",
        "description": "Replace existing tags with the list provided",
        "parameters": [
          {
            "name": "iotid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sigid",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "tags",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TagsReplace"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag instance was created",
            "schema": {
              "$ref": "#/definitions/TagInstance"
            }
          },
          "400": {
            "description": "Must include a list of tags to replace existing ones"
          }
        }
      }
    },
    "/tagging/meta/{tag_id}": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get meta tags for a given id",
        "description": "Get meta tags for a given id",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The tag id of the tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Item found",
            "schema": {
              "$ref": "#/definitions/TagList"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tagging"
        ],
        "summary": "Delete meta tags for the id given",
        "description": "Delete meta tags for the id given",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the tag"
          }
        ],
        "responses": {
          "204": {
            "description": "Item deleted"
          },
          "500": {
            "description": "Tag not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tagging/events": {
      "get": {
        "tags": [
          "Tagging"
        ],
        "summary": "Get all tag event triggers",
        "description": "Get all tag event triggers",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TagEventPut"
            }
          }
        }
      }
    },
    "/tagging/events/{tag_id}/{event_id}": {
      "delete": {
        "tags": [
          "Tagging"
        ],
        "summary": "Delete a tag event trigger",
        "description": "Delete a tag event trigger",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The tag id"
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The event id"
          }
        ],
        "responses": {
          "204": {
            "description": "Item deleted"
          },
          "404": {
            "description": "Trigger not found"
          }
        }
      },
      "put": {
        "tags": [
          "Tagging"
        ],
        "summary": "Updates a tag event trigger record",
        "description": "Update a tag event trigger",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The tag id"
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The event id"
          },
          {
            "name": "event_trigger",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventTrigger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated"
          },
          "500": {
            "description": "Error couldn't fetch or insert",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/regex": {
      "post": {
        "tags": [
          "Tagging"
        ],
        "summary": "Test a regex",
        "description": "Test a regular expression",
        "parameters": [
          {
            "name": "regex",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Regex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Request must include json or Request must include a regex"
          },
          "500": {
            "description": "failed"
          }
        }
      }
    },
    "/flows/device/{iotmac}": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Returns all flows traffic for an iot mac",
        "description": "Returns all flows traffic for an iot mac",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The protocol, tcp or udp"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Flows"
            }
          },
          "404": {
            "description": "no traffic found"
          }
        }
      }
    },
    "/flows/device/{iotmac}/{direction}": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Returns all flows traffic for an iot mac",
        "description": "Returns all flows traffic for an iot mac (IN or OUT traffic)",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "direction",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The direction, either in or out traffic"
          },
          {
            "name": "protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The protocol, tcp or udp"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Flows"
            }
          },
          "404": {
            "description": "no traffic found"
          }
        }
      }
    },
    "/flows/device/{iotmac}/{direction}/page/{offset}/{size}": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Returns all flows traffic for an iot mac",
        "description": "Returns all flows traffic for an iot mac in a paginated fashion",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "direction",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The direction, either in or out traffic"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The page offset for pagination"
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The size of the page. Defaults to 10000"
          },
          {
            "name": "protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The protocol, tcp or udp"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Flows"
            }
          },
          "404": {
            "description": "no traffic found"
          }
        }
      }
    },
    "/flows/summary/{iotmac}": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Returns flows traffic summary information",
        "description": "Returns flows traffic summary information",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The protocol, tcp or udp"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/FlowsSummary"
            }
          },
          "404": {
            "description": "no traffic found"
          }
        }
      }
    },
    "/flows/summary/{iotmac}/{direction}": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Returns flows traffic summary information",
        "description": "Returns flows traffic summary information",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "direction",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The direction, either in or out traffic"
          },
          {
            "name": "protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The protocol, tcp or udp"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/FlowsSummary"
            }
          },
          "404": {
            "description": "no traffic found"
          }
        }
      }
    },
    "/flows/summary/{iotmac}/{direction}/since/{timestamp}": {
      "get": {
        "tags": [
          "Flows"
        ],
        "summary": "Returns flows traffic summary information",
        "description": "Returns flows traffic summary information",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "direction",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The direction, either in or out traffic"
          },
          {
            "name": "timestamp",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The since timestamp"
          },
          {
            "name": "protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The protocol, tcp or udp"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/FlowsSummary"
            }
          },
          "404": {
            "description": "no traffic found"
          }
        }
      }
    },
    "/associated/devices/{iotmac}/_count": {
      "get": {
        "tags": [
          "AssociatedDevices"
        ],
        "summary": "Get traffic and dns count",
        "description": "Returns the traffic and dns count for a given iotmac pair",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TrafficCount"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/associated/devices/{iotmac}/_checkin": {
      "get": {
        "tags": [
          "AssociatedDevices"
        ],
        "summary": "Get timestamp info for a given iotmac/devmac pair",
        "description": "Returns first and last timestamp for a given iotmac/devmac pair",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/CheckInData"
            }
          },
          "404": {
            "description": "No packets data found"
          }
        }
      }
    },
    "/associated/devices/{device_id}/_list": {
      "get": {
        "tags": [
          "AssociatedDevices"
        ],
        "summary": "Get associated devices details for a given device id",
        "description": "Returns associated devices details for a given senrio device id",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The senrio device id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/AssociatedDeviceList"
            }
          },
          "404": {
            "description": "device not found"
          },
          "500": {
            "description": "too many devices found"
          }
        }
      }
    },
    "/associated/devices/{iotmac}/_vendor": {
      "get": {
        "tags": [
          "AssociatedDevices"
        ],
        "summary": "Get the vendor for a given iotmac",
        "description": "Returns the vendor for the iotmac that matches the product oui",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/VendorData"
            }
          },
          "404": {
            "description": "No vendor found"
          }
        }
      }
    },
    "/dnstraffic/{iotmac}/{offset}/{size}": {
      "get": {
        "tags": [
          "DNSTraffic"
        ],
        "summary": "Get dns traffic info",
        "description": "Returns a list of dns rows based on pagination options provided",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The offset from the first result you want to fetch"
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The maximum amount of rows to be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/DNSTrafficRows"
            }
          },
          "404": {
            "description": "DNS Traffic not found"
          }
        }
      }
    },
    "/traffic/{iotmac}/{offset}/{size}": {
      "get": {
        "tags": [
          "Traffic"
        ],
        "summary": "Get traffic info",
        "description": "Returns a list of traffic rows based on pagination options provided",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The offset from the first result you want to fetch"
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The maximum amount of rows to be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TrafficRows"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/traffic/search": {
      "post": {
        "tags": [
          "TrafficSearch"
        ],
        "summary": "Search for traffic based on the specific grammar",
        "description": "Search for traffic based on the specific grammar",
        "parameters": [
          {
            "name": "search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrafficSearch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SearchTrafficResponse"
            }
          },
          "400": {
            "description": "Search string not provided or Invalid query",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "no traffic found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/traffic/search/{start}/{size}": {
      "post": {
        "tags": [
          "TrafficSearch"
        ],
        "summary": "Search for traffic based on the specific grammar and limit the results",
        "description": "Search for traffic based on the specific grammar in a paginated way",
        "parameters": [
          {
            "name": "start",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The offset for pagination"
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The amount of results for pagination"
          },
          {
            "name": "search",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrafficSearch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SearchTrafficResponse"
            }
          },
          "400": {
            "description": "Invalid json query",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/dhcp": {
      "get": {
        "tags": [
          "Traffic"
        ],
        "summary": "Get DHCP traffic info",
        "description": "Returns all the dhcp traffic",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/DhcpRows"
            }
          },
          "404": {
            "description": "Couldn't find dhcp options for device_id, iotmac"
          }
        }
      }
    },
    "/dhcp/{device_id}/{iotmac}": {
      "get": {
        "tags": [
          "Traffic"
        ],
        "summary": "Get DHCP traffic info for an iot device",
        "description": "Returns dhcp traffic for a given iot mac",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The senrio device id"
          },
          {
            "name": "iotmac",
            "description": "The iotmac of the device",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Dhcp"
            }
          },
          "400": {
            "description": "Both device_id and iotmac must be provided"
          },
          "404": {
            "description": "Couldn't find dhcp options for device_id, iotmac"
          }
        }
      }
    },
    "/search/help": {
      "get": {
        "tags": [
          "TrafficSearch"
        ],
        "summary": "Help examples for the search grammar",
        "description": "Returns sample queries to guide users through using the search bar.",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SearchHelp"
            }
          }
        }
      }
    },
    "/unique/ip/dst/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination IPs by the iotmac",
        "description": "Returns a list of the unique destination ips for a given iotmac",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniqueIps"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ip/src/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique source IPs for an iotmac",
        "description": "Returns a list of the unique source ips for a given iotmac",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniqueIps"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/port/src/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique source ports for an iotmac",
        "description": "Returns a list of the unique source ports for a given iotmac",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniqueIps"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/port/dst/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination ports for the iotmac",
        "description": "Returns a list of the unique destination ports for a given iotmac",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniqueIps"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ip/dst/{dst_ip}/port/dst/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination ports by destination ip and the iotmac",
        "description": "Returns a list of the unique destination ports for a given the iotmac and a destination IP",
        "parameters": [
          {
            "name": "dst_ip",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The destination IP"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ip/dst/{dst_ip}/port/src/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique source ports by source ip and iotmac",
        "description": "Returns a list of the unique source port for a given iotmac and a destination IP",
        "parameters": [
          {
            "name": "dst_ip",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The destination IP"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ip/src/{src_ip}/port/dst/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination ports by source ip and iotmac",
        "description": "Returns a list of the unique destination port for a given iotmac and a source IP",
        "parameters": [
          {
            "name": "src_ip",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The source IP"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ip/src/{src_ip}/port/src/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique source ports by source ip and iotmac",
        "description": "Returns a list of the unique source port for a given iotmac and a source IP",
        "parameters": [
          {
            "name": "src_ip",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The source IP"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ip/src/{src_ip}/port/src/{iotmac}/{src_port}/{offset}/{size}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination ports by source ip, source port and iotmac. Limit the results",
        "description": "Returns a list of destination ports for a given the iotmac a source port and a source IP, in a paginated way",
        "parameters": [
          {
            "name": "src_ip",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The source IP"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "src_port",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The source port"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The offset from the first result you want to fetch"
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The maximum amount of rows to be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ip/src/{iotmac}/{offset}/{size}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination ports by the iotmac.",
        "description": "Returns a list of destination ports for a given iotmac in a paginated fashion by time",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The offset from the first result you want to fetch"
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The maximum amount of rows to be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/dns_req/{iotmac}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination ports for dns_requests and iotmac",
        "description": "Returns a list of destination ports for a given iotmac and dns_requests",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/dns_req": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique destination ports for dns_requests and iotmac",
        "description": "Returns a list of destination ports for a given iotmac and dns_requests",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePorts"
            }
          },
          "404": {
            "description": "Traffic not found"
          }
        }
      }
    },
    "/unique/ports/{device_id}": {
      "get": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique source ports for a senrio device",
        "description": "Get unique source ports for a senrio device",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePortsDevice"
            }
          },
          "404": {
            "description": "no flows found"
          }
        }
      }
    },
    "/unique/ports": {
      "post": {
        "tags": [
          "UniqueValues"
        ],
        "summary": "Get unique source ports for the senrio devices",
        "description": "Get unique source ports for the senrio devices",
        "parameters": [
          {
            "name": "device_ids",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortsDeviceIds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UniquePortsDevice"
            }
          },
          "400": {
            "description": "iotmac is required"
          }
        }
      }
    },
    "/{username}/{senrioid}/traffic/{iotmac}": {
      "get": {
        "tags": [
          "Traffic"
        ],
        "summary": "Get traffic for a user, device id and iotmac",
        "description": "Get all the traffic given a user, device id and iotmac",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          },
          {
            "name": "senrioid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The senrio device id"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The iot mac address"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/TrafficRows"
            }
          },
          "404": {
            "description": "no traffic found"
          }
        }
      }
    },
    "/iotdevices": {
      "get": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Returns all vendor and product data for all iotdevices",
        "description": "Returns all vendor and product data for all iotdevices",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Iotdevices"
            }
          },
          "404": {
            "description": "IOT devices not found"
          }
        }
      }
    },
    "/iotdevices/{iotmac}": {
      "get": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Returns an specific iotdevice for the given mac",
        "description": "Returns an iotdevice data for the given mac address",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "tags",
            "in": "query",
            "type": "integer",
            "description": "1 to return tagging information for the iot device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Iotdevice"
            }
          },
          "404": {
            "description": "iotmac not found"
          }
        }
      },
      "put": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Updates an iot device",
        "description": "Updates an iot device",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "iotdevice",
            "in": "body",
            "description": "The iot device json",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Iotdevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "iot device updated",
            "schema": {
              "$ref": "#/definitions/Iotdevice"
            }
          },
          "400": {
            "description": "iot mac is required"
          },
          "404": {
            "description": "iotmac not found"
          }
        }
      },
      "delete": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Deletes an iot device",
        "description": "Deletes an iot device",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "204": {
            "description": "item deleted"
          },
          "404": {
            "description": "iotmac not found"
          }
        }
      }
    },
    "/iotdevices/new": {
      "post": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Create a new iot device",
        "description": "Create a new iot device",
        "parameters": [
          {
            "name": "iotdevice",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Iotdevice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Iot device created",
            "schema": {
              "$ref": "#/definitions/Iotdevice"
            }
          },
          "400": {
            "description": "iotmac is required"
          }
        }
      }
    },
    "/iotdevices/_query": {
      "post": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Advanced query for iotdevices",
        "description": "Query iot devices by providing filters in the json post",
        "parameters": [
          {
            "name": "iotdevice",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IotdeviceQuery"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "1 if want to get tagging information"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page number for pagination"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The page size. Should be greater or equals to 1"
          }
        ],
        "responses": {
          "200": {
            "description": "The iot devices list",
            "schema": {
              "$ref": "#/definitions/Iotdevices"
            }
          },
          "400": {
            "description": "Page size must be at least 1"
          }
        }
      }
    },
    "/iotdevices/status": {
      "get": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Returns all iot devices statuses",
        "description": "Returns all iot devices statuses",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/IotstatusList"
            }
          },
          "404": {
            "description": "status not found"
          }
        }
      }
    },
    "/iotdevices/status/{status_name}": {
      "get": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Returns an specific iot status",
        "description": "Returns an specific iot status given the status name",
        "parameters": [
          {
            "name": "status_name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The iot status"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Iotstatus"
            }
          },
          "404": {
            "description": "status not found"
          }
        }
      },
      "delete": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Deletes an specific iot status",
        "description": "Deletes an specific iot status given the status name",
        "parameters": [
          {
            "name": "status_name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The iot status"
          }
        ],
        "responses": {
          "204": {
            "description": "status deleted"
          },
          "404": {
            "description": "status not found"
          }
        }
      },
      "post": {
        "tags": [
          "IOTDevices"
        ],
        "summary": "Create a new iot status",
        "description": "Create a new iot status",
        "parameters": [
          {
            "name": "status_name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The iot status"
          }
        ],
        "responses": {
          "201": {
            "description": "Iot status created",
            "schema": {
              "$ref": "#/definitions/Iotstatus"
            }
          },
          "400": {
            "description": "Status already exists"
          }
        }
      }
    },
    "/senrios": {
      "get": {
        "tags": [
          "SenrioDevices"
        ],
        "summary": "Returns all senrio devices",
        "description": "Returns all senrio devices",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SenrioDevices"
            }
          },
          "404": {
            "description": "senrios not found"
          }
        }
      }
    },
    "/senrios/{device_id}": {
      "get": {
        "tags": [
          "SenrioDevices"
        ],
        "summary": "Returns details for an speceific senrio id",
        "description": "Returns details for an specific senrio given the device id",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the senrio device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SenrioDeviceGet"
            }
          },
          "404": {
            "description": "device not found"
          },
          "500": {
            "description": "too many devices found"
          }
        }
      }
    },
    "/senrios/{device_id}/netinfo": {
      "get": {
        "tags": [
          "SenrioDevices"
        ],
        "summary": "Returns network info for an speceific senrio id",
        "description": "Returns network information for an specific senrio given the device id",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the senrio device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/SenrioNetInfo"
            }
          },
          "404": {
            "description": "device not found"
          },
          "500": {
            "description": "too many devices found"
          }
        }
      }
    },
    "/whois/geo/{ip}": {
      "get": {
        "tags": [
          "IPWhois"
        ],
        "summary": "Returns location data from an IP address",
        "description": "Returns location data from an IP address",
        "parameters": [
          {
            "name": "ip",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "An IP address"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/IPWhois"
            }
          },
          "404": {
            "description": "IP not found"
          }
        }
      }
    },
    "/watchers": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "Returns all watchers",
        "description": "Returns all watchers",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Watchers"
            }
          },
          "404": {
            "description": "watcher not found"
          }
        }
      }
    },
    "/watchers/algorithms": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "Returns all watcher algorithms",
        "description": "Returns all watchers algorithms",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Algorithms"
            }
          },
          "404": {
            "description": "watcher not found"
          }
        }
      }
    },
    "/watchers/{iotmac}": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "Returns all watchers given the iotmac",
        "description": "Returns all watchers for the iotmac given",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Watchers"
            }
          },
          "400": {
            "description": "No device found"
          },
          "404": {
            "description": "watcher not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Watchers"
        ],
        "summary": "Disables the watcher for the device",
        "description": "Disables the watcher for the device",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted"
          },
          "404": {
            "description": "watcher not found"
          }
        }
      }
    },
    "/watchers/{iotmac}/{algid}": {
      "post": {
        "tags": [
          "Watchers"
        ],
        "summary": "Enables a watcher",
        "description": "Enables a watcher for an iot mac",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "algid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The algorithm id"
          }
        ],
        "responses": {
          "201": {
            "description": "watcher enabled"
          },
          "400": {
            "description": "Watcher already exists or not device found"
          },
          "404": {
            "description": "Algorithm id not found"
          }
        }
      }
    },
    "/watchers/{watcher_id}/update": {
      "put": {
        "tags": [
          "Watchers"
        ],
        "summary": "Updates a watcher",
        "description": "Updates a watcher by its id",
        "parameters": [
          {
            "name": "watcher_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the watcher"
          },
          {
            "name": "watcher",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Watcher"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "resource updated",
            "schema": {
              "$ref": "#/definitions/Watcher"
            }
          },
          "400": {
            "description": "Missing watcher"
          },
          "404": {
            "description": "No watcher found"
          }
        }
      }
    },
    "/watchers/{watcher_id}/model": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "Returns all watchers by id",
        "description": "Returns all watchers by the watcher id",
        "parameters": [
          {
            "name": "watcher_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The watcher id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/WatcherModel"
            }
          },
          "404": {
            "description": "Watcher model doesn't exist"
          }
        }
      },
      "put": {
        "tags": [
          "Watchers"
        ],
        "summary": "Updates a watcher",
        "description": "Updates a watcher by its id",
        "parameters": [
          {
            "name": "watcher_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the watcher"
          },
          {
            "name": "watcher",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WatcherModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - resource updated"
          },
          "400": {
            "description": "Invalid json provided"
          },
          "404": {
            "description": "Watcher model doesn't exist"
          }
        }
      },
      "post": {
        "tags": [
          "Watchers"
        ],
        "summary": "creates a watcher",
        "description": "creates a new watcher by providing a watcher id",
        "parameters": [
          {
            "name": "watcher_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the watcher"
          },
          {
            "name": "watcher",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WatcherModel"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - resource created"
          },
          "400": {
            "description": "Invalid json provided - Invalid watcher id"
          }
        }
      },
      "delete": {
        "tags": [
          "Watchers"
        ],
        "summary": "deletes a watcher",
        "description": "deletes a watcher by id",
        "parameters": [
          {
            "name": "watcher_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the watcher"
          },
          {
            "name": "watcher",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WatcherModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - resource deleted"
          }
        }
      }
    },
    "/watchers/logs": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "Returns all watcher logs",
        "description": "Returns all watcher logs",
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/WatchersLogs"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Watchers"
        ],
        "summary": "Creates a new watcher log entry",
        "description": "Creates a new watcher log entry",
        "parameters": [
          {
            "name": "watcher_log",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WatcherLog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource created",
            "schema": {
              "$ref": "#/definitions/WatcherLog"
            }
          }
        }
      }
    },
    "/watchers/logs/{watcher_id}": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "Returns all watcher logs for a given watcher",
        "description": "Returns all watcher logs for a given watcher",
        "parameters": [
          {
            "name": "watcher_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the watcher"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/WatchersLogs"
            }
          }
        }
      }
    },
    "/watchers/logs/{watcher_id}/{offset}/{size}": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "Returns all watchers logs for a given watcher paginated",
        "description": "Returns all watchers logs for a given watcher paginated",
        "parameters": [
          {
            "name": "watcher_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the watcher"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The offset from the first result you want to fetch"
          },
          {
            "name": "size",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The maximum amount of rows to be returned"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/WatchersLogs"
            }
          },
          "404": {
            "description": "watcher logs not found"
          }
        }
      }
    },
    "/watchers/{iotmac}/{algid}/reset": {
      "get": {
        "tags": [
          "Watchers"
        ],
        "summary": "It resets a watcher",
        "description": "It resets a watcher by resetting last trained and last detected",
        "parameters": [
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the IOT device"
          },
          {
            "name": "algid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The id of the ML algorithm"
          }
        ],
        "responses": {
          "204": {
            "description": "watcher reset OK"
          },
          "400": {
            "description": "No device found"
          },
          "404": {
            "description": "watchers not found"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a user and the senrio devices",
        "description": "Returns a user and all the senrio devices associated with the username",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/users/senrios/associate/{dev_id}/{username}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Associates a senrio device to a user",
        "description": "Associates a senrio device to a user",
        "parameters": [
          {
            "name": "dev_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the device"
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          },
          {
            "name": "deviceName",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceName"
            },
            "description": "An alias to the senrio"
          }
        ],
        "responses": {
          "204": {
            "description": "Associated senrio"
          },
          "400": {
            "description": "Invalid user or device",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/senrios/disassociate/{dev_id}/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Disassociates a senrio device from a user",
        "description": "Disassociates a senrio device from a user",
        "parameters": [
          {
            "name": "dev_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the device"
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "disassociated senrio"
          },
          "400": {
            "description": "Invalid user or device",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{username}/{deviceid}/devicename": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the user's device name",
        "description": "Updates the user's device name",
        "parameters": [
          {
            "name": "deviceid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The device id"
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          },
          {
            "name": "deviceName",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceName"
            },
            "description": "An alias to the senrio"
          }
        ],
        "responses": {
          "204": {
            "description": "The updated senrio of the user",
            "schema": {
              "$ref": "#/definitions/Senrio"
            }
          },
          "400": {
            "description": "Invalid user or device",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user/{username}/_graph": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns associated devices details for a given username",
        "description": "Returns associated devices details for a given username. It uses the format for a graph",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "A graph structure representing the information about associated devices",
            "schema": {
              "$ref": "#/definitions/DeviceGraph"
            }
          },
          "404": {
            "description": "graph data not found"
          }
        }
      }
    },
    "/user/{username}/_graph/{tag_type}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns associated devices details for a given username and tag type",
        "description": "Returns associated devices details for a given username and tag type. It uses the format for a graph",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          },
          {
            "name": "tag_type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The tag type name"
          }
        ],
        "responses": {
          "200": {
            "description": "A graph structure representing the information about associated devices",
            "schema": {
              "$ref": "#/definitions/DeviceGraph"
            }
          },
          "404": {
            "description": "graph data not found"
          }
        }
      }
    },
    "/graphview/alias": {
      "get": {
        "tags": [
          "Graphview"
        ],
        "summary": "Returns all aliases",
        "description": "Returns all aliases",
        "responses": {
          "200": {
            "description": "All aliases",
            "schema": {
              "$ref": "#/definitions/AliasList"
            }
          },
          "404": {
            "description": "aliases data not found"
          }
        }
      }
    },
    "/graphview/alias/{subject}": {
      "get": {
        "tags": [
          "Graphview"
        ],
        "summary": "Returns an alias for a given iotmac",
        "description": "Returns an alias for a given iotmac",
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The iotmac"
          }
        ],
        "responses": {
          "200": {
            "description": "The alias for the given iotmac",
            "schema": {
              "$ref": "#/definitions/Alias"
            }
          },
          "404": {
            "description": "alias data not found"
          }
        }
      }
    },
    "/graphview/alias/{subject}/{rowid}": {
      "put": {
        "tags": [
          "Graphview"
        ],
        "summary": "Updates the alias data",
        "description": "Updates the alias data for a given iotmac and rowid",
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The iotmac"
          },
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The record id"
          },
          {
            "name": "alias",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alias"
            },
            "description": "The alias json with the data to update"
          }
        ],
        "responses": {
          "204": {
            "description": "The updated alias",
            "schema": {
              "$ref": "#/definitions/Alias"
            }
          },
          "400": {
            "description": "Invalid iotmac or rowid given"
          }
        }
      },
      "delete": {
        "tags": [
          "Graphview"
        ],
        "summary": "Deletes an alias",
        "description": "Deletes an alias for a given iotmac and rowid",
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The iotmac"
          },
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The record id"
          }
        ],
        "responses": {
          "204": {
            "description": "alias deleted"
          },
          "400": {
            "description": "Invalid iotmac or rowid given"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Returns all notifications",
        "description": "Returns all notifications",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "type": "string",
            "description": "The username"
          },
          {
            "name": "read",
            "in": "query",
            "type": "integer",
            "description": "read or not"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/NotificationList"
            }
          },
          "404": {
            "description": "notifications not found"
          }
        }
      }
    },
    "/notifications/new": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Creates a new notification",
        "description": "Creates a new notification",
        "parameters": [
          {
            "name": "notification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationPost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Pushed notification",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Missing fiel in request"
          },
          "404": {
            "description": "User provided but did not exist"
          },
          "500": {
            "description": "Invalid field with value"
          }
        }
      }
    },
    "/notifications/{rowid}": {
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Updates a notification",
        "description": "Updates a notification for a given rowid",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The rowid"
          },
          {
            "name": "notification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationPut"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notification updated",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Missing fiel in request"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "Deletes a notification",
        "description": "Deletes a notification for a given rowid",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The row id of the notification"
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Returns a single notification",
        "description": "Returns a single notification for a given row id",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The row id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "404": {
            "description": "notification not found"
          }
        }
      }
    },
    "/notifications/resend/{rowid}/{username}": {
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Re-sends a notification",
        "description": "Re-sends a notification for a given rowid and username",
        "parameters": [
          {
            "name": "rowid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The rowid"
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The rowid"
          }
        ],
        "responses": {
          "204": {
            "description": "Notification updated",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Missing fiel in request"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      }
    },
    "/notifications/ack/{username}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark notification as read",
        "description": "Mark notification as read for a given username",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notifications/unack/{username}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark notification as unread",
        "description": "Mark notification as unread for a given username",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notifications/arch/{username}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Archive a notification",
        "description": "Archive a notification for a given username",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notifications/unarch/{username}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Unarchive a notification",
        "description": "Unarchive a notification for a given username",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notifications/bulk": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Bulks a notification",
        "description": "Bulks a notification",
        "parameters": [
          {
            "name": "notification_bulk",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationBulkPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          }
        }
      }
    },
    "/notification_rules": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get all notification rules",
        "description": "Get all notification rules",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/NotificationRuleList"
            }
          },
          "404": {
            "description": "Could not find matching rule id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Creates a new notification rule",
        "description": "Creates a new notification rule",
        "parameters": [
          {
            "name": "notification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification rule created",
            "schema": {
              "$ref": "#/definitions/NotificationRule"
            }
          },
          "400": {
            "description": "Must provide valid post data"
          }
        }
      }
    },
    "/notification_rules/{rule_id}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get a particular notification rule",
        "description": "Get a notification rule given the rule id",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The rule id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/NotificationRule"
            }
          },
          "404": {
            "description": "Could not find matching rule id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update a particular notification rule",
        "description": "Update a notification rule given the rule id",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The rule id"
          }
        ],
        "responses": {
          "204": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Invalid put data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "Deletes a notification rule",
        "description": "Deletes a notification rule given the rule id",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The rule id"
          }
        ],
        "responses": {
          "200": {
            "description": "item deleted",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Must provide a rule_id to delete",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Could not find rule id",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/user_data/{dev_id}": {
      "get": {
        "tags": [
          "Server"
        ],
        "summary": "Returns a user and the senrio devices",
        "description": "Returns a user and all the senrio devices associated with the username",
        "parameters": [
          {
            "name": "dev_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The senrio device id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/UserDataList"
            }
          },
          "404": {
            "description": "user data not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/server/notify": {
      "post": {
        "tags": [
          "Server"
        ],
        "summary": "Creates a new notification",
        "description": "Creates a new notification",
        "parameters": [
          {
            "name": "notification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/totals/widget/global/{subject}": {
      "get": {
        "tags": [
          "Totals"
        ],
        "summary": "Returns global widget counts for a given username",
        "description": "Returns global widget counts for a user username",
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "The alias for the given iotmac",
            "schema": {
              "$ref": "#/definitions/WidgetCountGlobal"
            }
          },
          "400": {
            "description": "Invalid user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/totals/widget/{subject}": {
      "get": {
        "tags": [
          "Totals"
        ],
        "summary": "Returns widgets for a given username",
        "description": "Returns widget counts for a user username",
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The username"
          }
        ],
        "responses": {
          "200": {
            "description": "The alias for the given iotmac",
            "schema": {
              "$ref": "#/definitions/WidgetCount"
            }
          },
          "400": {
            "description": "Invalid user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/purge/{device_id}": {
      "delete": {
        "tags": [
          "PurgeTraffic"
        ],
        "summary": "Schedule a device for traffic deletion",
        "description": "Schedule a device for traffic deletion. Deletes traffic for the device",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The device id"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete traffic OK"
          },
          "404": {
            "description": "device not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "too many devices found?",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/purge/{device_id}/{iotmac}": {
      "delete": {
        "tags": [
          "PurgeTraffic"
        ],
        "summary": "Schedule a device and iotmac for traffic deletion",
        "description": "Schedule a device and iotmac for traffic deletion. Deletes traffic for the device id and the iotmac pair",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The device id"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the iot device"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete traffic ok"
          },
          "404": {
            "description": "device not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "too many devices found?",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unregister/{device_id}": {
      "delete": {
        "tags": [
          "UnregisterSenrio"
        ],
        "summary": "Unregister a senrio device for a device id",
        "description": "Unregister a senrio device by providing the device id",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The device id"
          }
        ],
        "responses": {
          "200": {
            "description": "Unregister senrio ok"
          },
          "404": {
            "description": "device not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "too many devices found?",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unregister/{device_id}/{iotmac}": {
      "delete": {
        "tags": [
          "UnregisterSenrio"
        ],
        "summary": "Unregister a senrio device for a device id and iotmac",
        "description": "Unregister a senrio device by providing a device id and iotmac pair",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The device id"
          },
          {
            "name": "iotmac",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mac address of the iot device"
          }
        ],
        "responses": {
          "200": {
            "description": "Unregister senrio ok"
          },
          "404": {
            "description": "device not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "too many devices found?",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/client_stats/{device_id}": {
      "get": {
        "tags": [
          "ClientStats"
        ],
        "summary": "Get client statistics",
        "description": "Get client statistics",
        "parameters": [
          {
            "name": "device_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The senrio device id"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter for a \"since\" date"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "The amount of traffic to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Returning items",
            "schema": {
              "$ref": "#/definitions/ClientStats"
            }
          },
          "404": {
            "description": "no traffic found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Returns the status of the API",
        "description": "Returns the status of the API",
        "responses": {
          "200": {
            "description": "Status OK"
          }
        }
      }
    },
    "/healthcheck/elasticsearch": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Returns whether the api can connect to elasticsearch",
        "description": "Returns whether the api can connect to elasticsearch",
        "responses": {
          "200": {
            "description": "Status OK"
          },
          "500": {
            "description": "Cannot connect to elasticsearch"
          }
        }
      }
    },
    "/healthcheck/mysql": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Returns whether the api can connect to MySQL",
        "description": "Returns whether the api can connect to MySQL",
        "responses": {
          "200": {
            "description": "Status OK"
          },
          "500": {
            "description": "Cannot connect to mysql"
          }
        }
      }
    }
  },
  "definitions": {
    "IgnoredDevice": {
      "required": [
        "iotmac",
        "status"
      ],
      "properties": {
        "iotmac": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "default": 1,
          "description": "boolean where 0 = not ignored 1 = ignored"
        }
      }
    },
    "IgnoredDevices": {
      "required": [
        "iotmacs"
      ],
      "properties": {
        "iotmacs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IgnoredDevice"
          }
        }
      }
    },
    "IgnoredDeviceExact": {
      "required": [
        "iotmacs"
      ],
      "properties": {
        "iotmacs": {
          "$ref": "#/definitions/IgnoredDevice"
        }
      }
    },
    "IgnoredDeviceStatus": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "integer"
        }
      }
    },
    "SignaturePost": {
      "required": [
        "data",
        "type",
        "created_by"
      ],
      "properties": {
        "create_date": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "The tag type name"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "Signature": {
      "properties": {
        "create_date": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "priority": {
          "type": "integer"
        },
        "rowid": {
          "type": "integer"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagType"
          }
        }
      }
    },
    "SignatureList": {
      "required": [
        "signatures"
      ],
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        }
      }
    },
    "Regex": {
      "properties": {
        "regex": {
          "type": "string"
        },
        "check": {
          "type": "string"
        }
      }
    },
    "TagPost": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tag."
        },
        "description": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "description": "The events assocaited with the tag",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Tag": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tag."
        },
        "description": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "description": "The events assocaited with the tag",
          "items": {
            "type": "string"
          }
        },
        "rowid": {
          "type": "integer"
        }
      }
    },
    "TagUpdate": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tag."
        },
        "description": {
          "type": "string",
          "description": "The description of the tag"
        }
      }
    },
    "TagList": {
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "TagsReplace": {
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TagInstanceCount": {
      "properties": {
        "tag_id": {
          "type": "integer"
        },
        "tag_name": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "TagInstanceCountList": {
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagInstanceCount"
          }
        }
      }
    },
    "TagEventPut": {
      "required": [
        "arguments"
      ],
      "properties": {
        "arguments": {
          "type": "string"
        }
      }
    },
    "EventTrigger": {
      "properties": {
        "event_id": {
          "type": "integer"
        },
        "tag_id": {
          "type": "integer"
        },
        "arguments": {
          "type": "string"
        }
      }
    },
    "TagEvent": {
      "properties": {
        "rowid": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventTrigger"
          }
        }
      }
    },
    "TagEventList": {
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagEvent"
          }
        }
      }
    },
    "TagInstancePost": {
      "required": [
        "iotid",
        "tag_id",
        "signature_id",
        "created_by"
      ],
      "properties": {
        "iotid": {
          "type": "string"
        },
        "enabled": {
          "type": "integer"
        },
        "tag_id": {
          "type": "integer"
        },
        "signature_id": {
          "type": "integer"
        },
        "created_by": {
          "type": "string"
        },
        "disabled_by": {
          "type": "string"
        }
      }
    },
    "TagInstance": {
      "properties": {
        "create_date": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "disable_date": {
          "type": "string"
        },
        "disabled_by": {
          "type": "string"
        },
        "enabled": {
          "type": "integer"
        },
        "iotid\"": {
          "type": "string",
          "description": "The iot device mac"
        },
        "rowid": {
          "type": "integer"
        },
        "signature": {
          "$ref": "#/definitions/Signature"
        },
        "tag": {
          "$ref": "#/definitions/Tag"
        }
      }
    },
    "TagInstanceList": {
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagInstance"
          }
        }
      }
    },
    "TagType": {
      "required": [
        "name",
        "description"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tag type."
        },
        "description": {
          "type": "string",
          "description": "The description of the tag type"
        }
      }
    },
    "TagTypeList": {
      "required": [
        "tag_types"
      ],
      "properties": {
        "tag_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagType"
          }
        }
      }
    },
    "FlowsEntry": {
      "properties": {
        "bytes_in": {
          "type": "integer"
        },
        "bytes_out": {
          "type": "integer"
        },
        "connection": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "dst_ip": {
          "type": "string"
        },
        "dst_mac": {
          "type": "string"
        },
        "dst_pair": {
          "type": "string"
        },
        "dst_port": {
          "type": "integer"
        },
        "iotmac": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "src_ip": {
          "type": "string"
        },
        "src_port": {
          "type": "integer"
        },
        "time_end": {
          "type": "integer"
        },
        "timestamp": {
          "type": "integer"
        }
      }
    },
    "FlowsSummaryEntry": {
      "properties": {
        "connection": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "FlowsSummary": {
      "properties": {
        "in_flows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlowsSummaryEntry"
          }
        },
        "out_flows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlowsSummaryEntry"
          }
        }
      }
    },
    "Flows": {
      "properties": {
        "in_flows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlowsEntry"
          }
        },
        "out_flows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FlowsEntry"
          }
        }
      }
    },
    "Dhcp": {
      "properties": {
        "iotmac": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "options": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "dhcp_vendor": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "DhcpRows": {
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dhcp"
          }
        }
      }
    },
    "TrafficCount": {
      "required": [
        "traffic_count",
        "dns_count"
      ],
      "properties": {
        "traffic_count": {
          "type": "integer",
          "description": "total traffic"
        },
        "dns_count": {
          "type": "integer",
          "description": "total dns traffic"
        }
      }
    },
    "CheckInData": {
      "required": [
        "last_seen",
        "first_packet"
      ],
      "properties": {
        "last_seen": {
          "type": "integer",
          "description": "last seen packet timestamp"
        },
        "first_packet": {
          "type": "integer",
          "description": "first packet timestamp"
        }
      }
    },
    "VendorData": {
      "required": [
        "vendor"
      ],
      "properties": {
        "vendor": {
          "type": "string",
          "description": "the vendor name"
        }
      }
    },
    "AssociatedDevice": {
      "properties": {
        "first_seen": {
          "type": "string"
        },
        "iotmac": {
          "type": "string",
          "description": "The iot mac address."
        },
        "last_seen": {
          "type": "string"
        }
      }
    },
    "AssociatedDeviceList": {
      "required": [
        "associated_devices"
      ],
      "properties": {
        "associated_devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssociatedDevice"
          }
        }
      }
    },
    "DNSTrafficRow": {
      "properties": {
        "device_id": {
          "type": "string",
          "description": "The senrio device id"
        },
        "iotmac": {
          "type": "string",
          "description": "The IOT mac address"
        },
        "dns_req": {
          "type": "string",
          "description": "The dns request"
        },
        "dns_response": {
          "type": "string",
          "description": "The dns response"
        },
        "dns_type": {
          "type": "string",
          "description": "The dns type"
        },
        "timestamp": {
          "type": "string",
          "format": "date",
          "description": "A timestamp"
        }
      }
    },
    "DNSTrafficRows": {
      "properties": {
        "traffic_rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DNSTrafficRow"
          }
        }
      }
    },
    "TrafficRow": {
      "properties": {
        "device_id": {
          "type": "string",
          "description": "The senrio device id"
        },
        "iotmac": {
          "type": "string",
          "description": "The IOT mac address"
        },
        "dst_ip": {
          "type": "string",
          "description": "The destination ip address"
        },
        "dst_port": {
          "type": "integer",
          "description": "The destination port"
        },
        "src_ip": {
          "type": "string",
          "description": "The source ip address"
        },
        "src_port": {
          "type": "integer",
          "description": "The source port"
        },
        "device_ip": {
          "type": "string",
          "description": "The device IP address"
        },
        "flags": {
          "type": "integer"
        },
        "packetlen": {
          "type": "integer"
        },
        "seq": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date",
          "description": "A timestamp"
        }
      }
    },
    "Traffic": {
      "properties": {
        "traffic_rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrafficRow"
          }
        }
      }
    },
    "TrafficRows": {
      "properties": {
        "traffic_rows": {
          "$ref": "#/definitions/Traffic"
        }
      }
    },
    "TrafficSearch": {
      "properties": {
        "search": {
          "type": "string",
          "description": "The query string to filter traffic, for example, show traffic from 1 day ago for iotmac 08:00:27:fb:2c:86"
        }
      }
    },
    "SearchTrafficResponse": {
      "properties": {
        "status": {
          "type": "string"
        },
        "traffic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrafficRow"
          }
        }
      }
    },
    "SearchHelp": {
      "properties": {
        "help_text": {
          "type": "string",
          "description": "A grammar example for the search query"
        },
        "help_detail": {
          "type": "string",
          "description": "The explanation of the grammar query string"
        }
      }
    },
    "UniqueIpsEntry": {
      "properties": {
        "doc_count": {
          "type": "string"
        },
        "key": {
          "type": "integer"
        },
        "key_as_string": {
          "type": "string",
          "description": "The string according to the key value"
        }
      }
    },
    "UniqueIps": {
      "properties": {
        "unique_ips": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UniqueIpsEntry"
          }
        }
      }
    },
    "UniquePortsDevice": {
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "port"
          }
        }
      }
    },
    "UniquePorts": {
      "properties": {
        "unique_ports": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "port"
          }
        }
      }
    },
    "Iotdevices": {
      "properties": {
        "iotdevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iotdevice"
          }
        }
      }
    },
    "TagIotDevice": {
      "properties": {
        "rowid": {
          "type": "integer"
        },
        "signature_id": {
          "type": "integer"
        },
        "tag": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "IotdeviceQuery": {
      "properties": {
        "iotmac": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "seen_since": {
          "type": "string"
        },
        "last_seen_by": {
          "type": "string"
        },
        "not_seen_since": {
          "type": "string"
        },
        "cidr": {
          "type": "string"
        },
        "risky": {
          "type": "string"
        },
        "device_guess": {
          "type": "string"
        },
        "iotvendor": {
          "type": "string"
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "is_iot": {
          "type": "string"
        },
        "watchers": {
          "type": "string"
        },
        "status": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "not_status": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Iotdevice": {
      "properties": {
        "alias": {
          "type": "string"
        },
        "device_guess": {
          "type": "string"
        },
        "first_seen": {
          "type": "integer"
        },
        "hostname": {
          "type": "string"
        },
        "iotmac": {
          "type": "string"
        },
        "subnet": {
          "type": "string"
        },
        "iotvendor": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "last_seen": {
          "type": "integer"
        },
        "last_seen_by": {
          "type": "string",
          "description": "The device id that the itodevice was last seen by"
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagIotDevice"
          }
        }
      }
    },
    "PortsDeviceIds": {
      "properties": {
        "device_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Iotstatus": {
      "properties": {
        "rowid": {
          "type": "integer"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "IotstatusList": {
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Iotstatus"
          }
        }
      }
    },
    "SenrioDevices": {
      "properties": {
        "senrios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SenrioDevice"
          }
        }
      }
    },
    "SenrioDevice": {
      "properties": {
        "internal_ip": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "user_code": {
          "type": "string"
        },
        "last_heartbeat": {
          "type": "string"
        },
        "net_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SenrioNetInfo"
          }
        }
      }
    },
    "SenrioNetInfo": {
      "properties": {
        "router_ip": {
          "type": "string"
        },
        "router_mac": {
          "type": "string"
        },
        "subnet_mask": {
          "type": "string"
        }
      }
    },
    "SenrioDeviceGet": {
      "properties": {
        "senrios": {
          "$ref": "#/definitions/SenrioDevice"
        }
      }
    },
    "Senrio": {
      "properties": {
        "rowid": {
          "type": "integer"
        },
        "devmac": {
          "type": "string"
        },
        "devicename": {
          "type": "string"
        },
        "user_id": {
          "type": "integer",
          "description": "The user id"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "IPWhois": {
      "properties": {
        "ip": {
          "type": "string"
        },
        "subvidisions": {
          "type": "array",
          "description": "An array of subdivisions",
          "items": {
            "type": "string"
          }
        },
        "location": {
          "type": "string",
          "description": "Latitude and longitude pair"
        },
        "country": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "continent": {
          "type": "string"
        }
      }
    },
    "Algorithm": {
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "data_slice": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rowid": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Algorithms": {
      "properties": {
        "algorithms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Algorithm"
          }
        }
      }
    },
    "Watchers": {
      "properties": {
        "watchers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Watcher"
          }
        }
      }
    },
    "WatcherModel": {
      "properties": {
        "watcher_id": {
          "type": "integer"
        },
        "model": {
          "type": "string"
        }
      }
    },
    "WatcherList": {
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The iotmac of the device"
          }
        }
      }
    },
    "AlgorithmData": {
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "data_slice": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rowid": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "Watcher": {
      "properties": {
        "rowid": {
          "type": "string"
        },
        "iotmac": {
          "type": "string"
        },
        "algorithm_data": {
          "$ref": "#/definitions/AlgorithmData"
        },
        "last_trained": {
          "type": "string"
        },
        "last_detected": {
          "type": "string"
        }
      }
    },
    "WatchersLogs": {
      "properties": {
        "watcher_logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WatcherLog"
          }
        }
      }
    },
    "WatcherLog": {
      "properties": {
        "rowid": {
          "type": "integer"
        },
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer"
        }
      }
    },
    "User": {
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "cell_phone": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          }
        },
        "senrios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SenrioDevice"
          }
        }
      }
    },
    "Role": {
      "properties": {
        "rowid": {
          "type": "integer"
        },
        "role": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date"
        },
        "updated_at": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "UserData": {
      "properties": {
        "ucell": {
          "type": "string"
        },
        "uemail": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "UserDataList": {
      "properties": {
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserData"
          }
        }
      }
    },
    "DeviceName": {
      "properties": {
        "deviceName": {
          "type": "string"
        }
      }
    },
    "AliasList": {
      "properties": {
        "alias": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alias"
          }
        }
      }
    },
    "Alias": {
      "properties": {
        "rowid": {
          "type": "integer"
        },
        "iotmac": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "senrioscore": {
          "type": "string"
        }
      }
    },
    "DeviceGraph": {
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          }
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Edge"
          }
        }
      }
    },
    "Node": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "display_name": {
          "type": "string",
          "description": "Senrio device name"
        },
        "label": {
          "type": "string",
          "description": "Senrio device mac address"
        },
        "desc": {
          "type": "string",
          "description": "The description for the node"
        },
        "weight": {
          "type": "integer"
        },
        "animate": {
          "type": "integer"
        },
        "double_click": {
          "$ref": "#/definitions/DoubleClick"
        }
      }
    },
    "DoubleClick": {
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/DoubleClickValue"
        }
      }
    },
    "DoubleClickValue": {
      "properties": {
        "page": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleClickArgs"
          }
        }
      }
    },
    "DoubleClickArgs": {
      "properties": {
        "user_code": {
          "type": "string"
        },
        "devicemac": {
          "type": "string"
        },
        "iotmac": {
          "type": "string"
        }
      }
    },
    "Edge": {
      "properties": {
        "source": {
          "type": "integer"
        },
        "target": {
          "type": "integer"
        },
        "label": {
          "type": "string"
        },
        "weight": {
          "type": "integer"
        }
      }
    },
    "NotificationList": {
      "properties": {
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        }
      }
    },
    "Iotcontext": {
      "properties": {
        "iotmac": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "first_seen": {
          "type": "integer"
        },
        "last_seen": {
          "type": "integer"
        },
        "device_guess": {
          "type": "string"
        },
        "last_seen_by": {
          "type": "string"
        },
        "iotvendor": {
          "type": "string"
        },
        "status": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      }
    },
    "NotificationBulkPost": {
      "properties": {
        "read": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "unread": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "archive": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "unarchive": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "Notification": {
      "properties": {
        "archived": {
          "type": "integer"
        },
        "body": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/Iotcontext"
        },
        "context_type": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "creator_name": {
          "type": "string"
        },
        "forwarded": {
          "type": "integer"
        },
        "read": {
          "type": "integer"
        },
        "rowid": {
          "type": "integer"
        },
        "subject": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "NotificationCreator": {
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "NotificationPost": {
      "required": [
        "target",
        "target_type",
        "creator",
        "creator_name",
        "subject",
        "body"
      ],
      "properties": {
        "target": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "creator": {
          "$ref": "#/definitions/NotificationCreator"
        },
        "creator_name": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "context": {
          "$ref": "#/definitions/Iotcontext"
        },
        "context_type": {
          "type": "string"
        }
      }
    },
    "NotificationPut": {
      "properties": {
        "target": {
          "type": "string"
        },
        "target_type": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "creator_name": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "context_type": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "read": {
          "type": "integer"
        },
        "archived": {
          "type": "integer"
        },
        "forwarded": {
          "type": "integer"
        }
      }
    },
    "NotificationRuleList": {
      "properties": {
        "notification_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationRule"
          }
        }
      }
    },
    "NotificationRule": {
      "properties": {
        "rule_id": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "order": {
          "type": "string"
        },
        "clause_type": {
          "type": "string"
        },
        "clause_data": {
          "type": "string"
        },
        "route_type": {
          "type": "string"
        },
        "route_data": {
          "type": "string"
        },
        "notification_type": {
          "type": "string"
        }
      }
    },
    "Widget": {
      "properties": {
        "associated_devices": {
          "type": "integer"
        },
        "associated_products": {
          "type": "integer"
        },
        "associated_reports": {
          "type": "integer"
        }
      }
    },
    "WidgetGlobal": {
      "properties": {
        "senrios": {
          "type": "integer"
        },
        "products": {
          "type": "integer"
        },
        "reports": {
          "type": "integer"
        },
        "associated_devices": {
          "type": "integer"
        }
      }
    },
    "WidgetCount": {
      "properties": {
        "widgets": {
          "$ref": "#/definitions/Widget"
        }
      }
    },
    "WidgetCountGlobal": {
      "properties": {
        "widgets": {
          "$ref": "#/definitions/WidgetGlobal"
        }
      }
    },
    "ClientStats": {
      "properties": {
        "device_id": {
          "type": "string"
        },
        "system_uptime": {
          "type": "integer"
        },
        "senrio_uptime": {
          "type": "integer"
        },
        "version": {
          "type": "string"
        },
        "dhcp_packets": {
          "type": "integer"
        },
        "traffic_packets": {
          "type": "integer"
        },
        "dns_packets": {
          "type": "integer"
        },
        "dhcp_errors": {
          "type": "integer"
        },
        "traffic_errors": {
          "type": "integer"
        },
        "dns_errors": {
          "type": "integer"
        },
        "free_mem": {
          "type": "integer"
        },
        "free_swp": {
          "type": "integer"
        },
        "total_mem": {
          "type": "integer"
        },
        "total_swp": {
          "type": "integer"
        },
        "timestamp": {
          "type": "integer"
        },
        "time_oldest": {
          "type": "integer"
        },
        "packets": {
          "type": "integer"
        },
        "errors": {
          "type": "integer"
        },
        "retries": {
          "type": "integer"
        }
      }
    },
    "SuccessMessage": {
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "The success message"
        }
      }
    },
    "Error": {
      "required": [
        "status",
        "message"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "error or ok"
        },
        "message": {
          "type": "string",
          "description": "Error message"
        }
      }
    }
  }
}
